name: Package and Release (on tag)

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create directory structure
        run: |
          mkdir -p ./Scrappy/.scrappy

      - name: Get the tag name
        id: get_tag
        run: echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Package full install and update zips
        run: |
          ZIP_NAME="Scrappy_${TAG_NAME}.muxzip"
          UPDATE_ZIP_NAME="Scrappy_${TAG_NAME}_update.muxapp"

          # Create the Scrappy directory structure
          mkdir -p ./Scrappy/.scrappy

          # Copy files for the update package
          cp mux_launch.sh ./Scrappy/
          cp -r assets helpers lib scenes scripts templates ./Scrappy/.scrappy/
          cp conf.lua globals.lua main.lua config.ini.example skyscraper_config.ini.example theme.ini ./Scrappy/.scrappy/

          # Create the update zip
          zip -r $UPDATE_ZIP_NAME ./Scrappy

          # Create the full install directory structure
          mkdir -p ./mnt/mmc/MUOS/application
          cp -r ./Scrappy ./mnt/mmc/MUOS/application/

          # Include assets/scrappy.png in /opt/muos/default/MUOS/theme/active/glyph/muxapp/
          mkdir -p ./opt/muos/default/MUOS/theme/active/glyph/muxapp/
          cp assets/scrappy.png ./opt/muos/default/MUOS/theme/active/glyph/muxapp/

          # Create the full install zip
          zip -r $ZIP_NAME ./mnt/mmc/MUOS/application/Scrappy ./opt/muos/default/MUOS/theme/active/glyph/muxapp/scrappy.png

          # List files to verify they were created
          ls -l

      - name: Get commit messages for the release
        id: get_commits
        run: |
          # Try to get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # If no previous tag is found, use the initial commit as the fallback
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          # Get commits between the previous tag and the current commit (from PREVIOUS_TAG to HEAD)
          COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --oneline --no-merges)

          # Separate commits by type
          CHANGED=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (chore:|refact:|refactor:)" || echo "None")
          ADDED=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (feat:|wip:)" || echo "None")
          FIXED=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (fix:)" || echo "None")

          # Format the output with actual newlines
          RELEASE_NOTES="## Scrappy ${TAG_NAME}

          ### üõ†Ô∏è Changed
          ${CHANGED}

          ### ‚ú® Added
          ${ADDED}

          ### üêõ Fixed
          ${FIXED}"

          # Save the release notes for later use
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub release with commit notes
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            Scrappy_${{ env.TAG_NAME }}.muxzip
            Scrappy_${{ env.TAG_NAME }}_update.muxapp
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
